def branch = "master"
if (env.gitlabMergeRequestIid) {
  branch = "merge-requests/${env.gitlabMergeRequestIid}"
} else if (env.gitlabSourceBranch) {
  branch = env.gitlabSourceBranch
}

def container_registry = 'container-registry.softwareheritage.org/{{gitlab_project_name}}'
def container_credential_id = 'gitlab-registry'

pipeline {
  agent any

  stages {

    stage('Checkout Repository') {
      steps {
        updateGitlabCommitStatus name: 'jenkins', state: 'running'
        checkout([
          $class: 'GitSCM',
          branches: [[name: branch]],
          userRemoteConfigs: [[
            url: '{{gitlab_url}}/{{gitlab_project_name}}.git',
            refspec: '+refs/heads/*:refs/remotes/origin/* \
                      +refs/merge-requests/*/head:refs/remotes/origin/merge-requests/*'
          ]],
        ])
      }
    }

    stage('Build docker images') {
      steps {
        sh '''#!/bin/bash
          export REGISTRY=swh-jenkins-test
          if [[ "$gitlabActionType" == "" ]] || \
            [[ "$gitlabActionType" == "PUSH" && "$gitlabBranch" == "master" ]]
          then
            export REGISTRY=swh-jenkins
          fi
          make checkrebuild all
        '''
      }
    }

    stage('Push docker images') {
      steps {
        script {
          if ( env.gitlabActionType == "PUSH" && env.gitlabBranch == "master" ) {
            docker.withRegistry("https://${container_registry}", container_credential_id) {
              sh """#!/bin/bash
                image_tag=\$(TZ=UTC date +%Y%m%d-%H%M%S)-g\$(git log -1 --pretty=%h)
                for dockerfile in */Dockerfile; do
                  image=\${dockerfile/\\/Dockerfile}
                  docker tag swh-jenkins/\${image} ${container_registry}/\${image}:\${image_tag}
                  docker tag ${container_registry}/\${image}:\${image_tag} ${container_registry}/\${image}:latest
                  docker push --all-tags ${container_registry}/\$image
                done
              """
            }
          } else {
            echo "Skipping `docker image push`."
          }
        }
      }
    }

  }
  post {
    {% filter indent(width=4) %}
      {%- include 'jobs/templates/includes/update-gitlab-commit-status.groovy.j2' -%}
    {% endfilter %}
  }
}
