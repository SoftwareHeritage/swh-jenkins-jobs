def branch = "master"
if (env.gitlabMergeRequestIid) {
  branch = "merge-requests/${env.gitlabMergeRequestIid}"
} else if (env.gitlabSourceBranch) {
  branch = env.gitlabSourceBranch
}

def startedByTimer = currentBuild.getBuildCauses('hudson.triggers.TimerTrigger$TimerTriggerCause')
def startedByUser = currentBuild.getBuildCauses('hudson.model.Cause$UserIdCause')
def startedByPushToMaster = env.gitlabActionType == "PUSH" && env.gitlabBranch == "master"

if ((startedByTimer || startedByUser || startedByPushToMaster) && !env.gitlabMergeRequestIid) {
  env.TAG_FOR_REAL = "true"
} else {
  env.TAG_FOR_REAL = "false"
}

def container_registry = 'container-registry.softwareheritage.org/{{gitlab_project_name}}'
def container_credential_id = 'gitlab-registry'

pipeline {
  agent any

  stages {

    stage('Checkout Repository') {
      steps {
        updateGitlabCommitStatus name: 'jenkins', state: 'running'
        checkout([
          $class: 'GitSCM',
          branches: [[name: branch]],
          userRemoteConfigs: [[
            url: '{{gitlab_url}}/{{gitlab_project_name}}.git',
            refspec: '+refs/heads/*:refs/remotes/origin/* \
                      +refs/merge-requests/*/head:refs/remotes/origin/merge-requests/*'
          ]],
        ])
      }
    }

    stage('Build docker images') {
      steps {
        sh '''#!/bin/bash
          if [ "$TAG_FOR_REAL" = "true" ]; then
            REGISTRY=swh-jenkins
          else
            REGISTRY=swh-jenkins-test
          fi
          make checkrebuild all REGISTRY=$REGISTRY JENKINS_UID={{jenkins_docker_uid}} JENKINS_GID={{jenkins_docker_gid}} DOCKER_GID={{docker_gid}}
        '''
      }
    }

    stage('Push docker images') {
      steps {
        script {
          docker.withRegistry("https://${container_registry}", container_credential_id) {
            sh """#!/bin/bash
              set -e

              image_tag=\$(TZ=UTC date +%Y%m%d-%H%M%S)-g\$(git log -1 --pretty=%h)
              if [ "\$TAG_FOR_REAL" != "true" ]; then
                docker () {
                  echo would run docker "\$@"
                }
              fi

              for dockerfile in */Dockerfile; do
                image=\${dockerfile/\\/Dockerfile}
                docker tag swh-jenkins/\${image} ${container_registry}/\${image}:\${image_tag}
                docker tag ${container_registry}/\${image}:\${image_tag} ${container_registry}/\${image}:latest
                for to_push in ${container_registry}/\${image}:\${image_tag} ${container_registry}/\${image}:latest; do
                  docker push \${to_push}
                done
              done
            """
          }
        }
      }
    }

  }
  post {
    {% filter indent(width=4) %}
      {%- include 'jobs/templates/includes/update-gitlab-commit-status.groovy.j2' -%}
    {% endfilter %}
  }
}
