pipeline {
  {% filter indent(width=2) %}
    {%- include 'includes/agent-docker.groovy.j2' -%}
  {% endfilter %}

  environment {
    PHAB_CONDUIT_URL = 'https://forge.softwareheritage.org/api/'
  }

  stages {
    stage('Checkout') {
      steps {
        {% filter indent(width=8) %}
          {%- include 'includes/create-phabricator-artifacts.groovy.j2' -%}
        {% endfilter %}
        checkout([
          $class: 'GitSCM',
          branches: [[name: "${params.REVISION}"]],
          doGenerateSubmoduleConfigurations: false,
          extensions: [],
          gitTool: 'Default',
          submoduleCfg: [],
          userRemoteConfigs: [
            [url: 'https://forge.softwareheritage.org/source/{{repo_name}}.git'],
          ],
          browser: [$class: 'Phabricator', repoUrl: 'https://forge.softwareheritage.org', repo: '{{name}}']
        ])
      }
    }

    {%- if phabricator_diff %}
    {% filter indent(width=4) %}
      {%- include 'includes/stage-apply-phabricator-diff.groovy.j2' -%}
    {% endfilter %}
    {%- endif %}

    stage('Static analysis') {
      steps {
        echo 'flake8'
        sh '''python3 -m tox -e flake8'''

        echo 'mypy'
        sh '''if python3 -m tox -a 2>/dev/null | grep -qx mypy ; then python3 -m tox -e mypy ; fi'''

        echo 'radon';
        sh  '''
        mkdir -p reports
        python3 -m radon raw --json swh/ > reports/raw_report.json
        python3 -m radon cc  --json swh/ > reports/cc_report.json
        python3 -m radon mi  --json swh/ > reports/mi_report.json
        python3 -m radon hal --json swh/ > reports/hal_report.json
        python3 -m radon cc  --xml  swh/ > reports/cc_report.xml
        '''
      }
      post {
        always {
          // Warnings NG
          recordIssues(
            enabledForFailure: true,
            tools: [
              ccm(pattern: '**/reports/cc_report.xml'),
            ],
          )
        }
      }
    } // static analysis

    stage('Tests') {
      parallel {
        {% filter indent(width=8) %}
          {%- include 'includes/stage-python-tests.groovy.j2' -%}
        {% endfilter %}

        {%- if do_cypress %}
        {% filter indent(width=8) %}
          {%- include 'includes/stage-cypress-tests.groovy.j2' -%}
        {% endfilter %}
        {%- endif %}
      }
    }
  } // stages

  post {
    always {
      // Archive a few report files
      archiveArtifacts allowEmptyArchive: true,
                       artifacts: 'reports/*,*.xml,tox*.ini',
                       fingerprint: true

      step([$class: 'PhabricatorNotifier',
            commentOnSuccess: true,
            commentWithConsoleLinkOnFailure: true,
            commentFile: '.phabricator-comment',
            commentSize: '1000000',
            preserveFormatting: true,
            processLint: true,
            lintFile: '.phabricator-lint',
            lintFileSize: '1000000',
      ])
    } // always

    cleanup {
      cleanWs()
    }
  } // post
} // pipeline
