pipeline {
  {% filter indent(width=2) %}
    {%- include 'includes/agent-docker.groovy.j2' -%}
  {% endfilter %}

  options {
    // require "Throttle Concurrent Builds" Jenkins plugin
    throttleJobProperty(
      categories: [],
      limitOneJobWithMatchingParams: false,
      maxConcurrentPerNode: {{ max_concurrent }},
      maxConcurrentTotal: {{ max_concurrent }},
      paramsToUseForLimit: '',
      throttleEnabled: true,
      throttleOption: 'project',
    )
  }

  {%- if not gitlab_project %}
  environment {
    PHAB_CONDUIT_URL = 'https://forge.softwareheritage.org/api/'
  }
  {%- endif %}

  stages {
    stage('Checkout') {
      steps {
        {%- if not gitlab_project %}
        {% filter indent(width=8) %}
          {%- include 'includes/create-phabricator-artifacts.groovy.j2' -%}
        {% endfilter %}
        {%- else %}
          updateGitlabCommitStatus name: 'jenkins', state: 'running'
        {%- endif %}
        checkout([
          $class: 'GitSCM',
          {%- if gitlab_project %}
          userRemoteConfigs: [[
            url: '{{gitlab_url}}/{{gitlab_project_name}}.git',
            refspec: '+refs/heads/*:refs/remotes/origin/* \
                      +refs/merge-requests/*/head:refs/remotes/origin/merge-requests/* \
                      +refs/tags/*:refs/remotes/origin/tags*',
          ]],
          branches: [[
            name: params.REVISION ?: "${env.gitlabSourceBranch}"
          ]],
          browser: [
            $class: 'GitLab',
            repoUrl: '{{gitlab_url}}/{{gitlab_project_name}}'
          ],
          {%- else %}
          userRemoteConfigs: [[
            url: 'https://forge.softwareheritage.org/source/{{repo_name}}.git',
            refspec: '+refs/heads/master:refs/remotes/origin/master',
          ]],
          branches: [[
            name: "${params.REVISION}"
          ]],
          browser: [
            $class: 'Phabricator',
            repoUrl: 'https://forge.softwareheritage.org', repo: '{{name}}'
          ],
          {%- endif %}
          doGenerateSubmoduleConfigurations: false,
          extensions: [[$class: 'CloneOption', honorRefspec: true]],
          gitTool: 'Default',
          submoduleCfg: [],
        ])
      }
    }

    {%- if not gitlab_project and phabricator_diff %}
    stage('Apply phabricator diff') {
      steps {
        {% filter indent(width=8) %}
          {%- include 'includes/script-apply-phabricator-diff.groovy.j2' -%}
        {% endfilter %}
      }
    }
    {%- endif %}

    stage ('flake8') {
      steps {
        sh '''python3 -m tox -e flake8'''
      }
    }

    stage ('mypy') {
      steps {
        sh '''python3 -m tox -e mypy'''
      }
    }

    stage ('radon') {
      steps {
        sh  '''
          mkdir -p reports
          python3 -m radon raw --json swh/ > reports/raw_report.json
          python3 -m radon cc  --json swh/ > reports/cc_report.json
          python3 -m radon mi  --json swh/ > reports/mi_report.json
          python3 -m radon hal --json swh/ > reports/hal_report.json
          python3 -m radon cc  --xml  swh/ > reports/cc_report.xml
        '''
      }
      post {
        always {
          // Archive a few report files
          archiveArtifacts(
            allowEmptyArchive: true,
            artifacts: 'reports/*',
            fingerprint: true,
          )

          // Warnings NG
          recordIssues(
            enabledForFailure: true,
            tools: [
              ccm(pattern: '**/reports/cc_report.xml'),
            ],
          )
        }
      }
    }

    stage('Tests') {
      options {
        timeout(time: {{ timeout }}, unit: 'MINUTES')
      }

      parallel {
        {% filter indent(width=8) %}
          {%- include 'includes/stage-python-tests.groovy.j2' -%}
        {% endfilter %}

        {%- if do_cypress %}
        {% filter indent(width=8) %}
          {%- include 'includes/stage-cypress-tests.groovy.j2' -%}
        {% endfilter %}
        {%- endif %}

        stage('Sphinx documentation') {
          {% filter indent(width=10) %}
            {%- include 'includes/agent-docker-sphinx.groovy.j2' -%}
          {% endfilter %}

          steps {
            sh '''
            if tox -a | grep -x sphinx >/dev/null
            then
              tox -e sphinx
            else
              echo WARNING: no sphinx environment in tox.ini
            fi
            '''
          }
        } // sphinx doc
      } // parallel
    } // Tests stage
  } // stages

  post {
    {%- if gitlab_project %}
    failure {
      updateGitlabCommitStatus name: 'jenkins', state: 'failed'
    }
    success {
      updateGitlabCommitStatus name: 'jenkins', state: 'success'
    }
    aborted {
      updateGitlabCommitStatus name: 'jenkins', state: 'canceled'
    }
    {%- else %}
    always {
      step([$class: 'PhabricatorNotifier',
            commentOnSuccess: true,
            commentWithConsoleLinkOnFailure: true,
            commentFile: '.phabricator-comment',
            commentSize: '1000000',
            preserveFormatting: true,
            processLint: true,
            lintFile: '.phabricator-lint',
            lintFileSize: '1000000',
      ])
    } // always
    {%- endif %}

    cleanup {
      cleanWs()
    }
  } // post
} // pipeline
