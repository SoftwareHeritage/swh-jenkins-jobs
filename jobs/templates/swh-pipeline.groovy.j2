def branch = "{{default_branch_name}}"
if (env.gitlabMergeRequestIid) {
  branch = "merge-requests/${env.gitlabMergeRequestIid}"
} else if (env.gitlabSourceBranch) {
  branch = env.gitlabSourceBranch
}

pipeline {
  {% filter indent(width=2) %}
    {%- include 'includes/agent-docker.groovy.j2' -%}
  {% endfilter %}

  options {
    {% filter indent(width=4) %}
      {%- include 'includes/throttle-job-property.groovy.j2' -%}
    {% endfilter %}
  }

  stages {
    stage('Checkout') {
      steps {
        updateGitlabCommitStatus name: 'jenkins', state: 'running'
        checkout([
          $class: 'GitSCM',
          userRemoteConfigs: [[
            url: '{{gitlab_url}}/{{gitlab_project_name}}.git',
            refspec: '+refs/heads/*:refs/remotes/origin/* \
                      +refs/merge-requests/*/head:refs/remotes/origin/merge-requests/* \
                      +refs/tags/*:refs/remotes/origin/tags*',
          ]],
          branches: [[
            name: params.REVISION ?: branch
          ]],
          browser: [
            $class: 'GitLab',
            repoUrl: '{{gitlab_url}}/{{gitlab_project_name}}'
          ],
          doGenerateSubmoduleConfigurations: false,
          extensions: [[$class: 'CloneOption', honorRefspec: true]],
          gitTool: 'Default',
          submoduleCfg: [],
        ])
      }
    }

    stage('Install dependencies') {
      steps {
        {% if production_jenkins %}
        withCredentials([
          string(credentialsId: 'sccache-redis-endpoint', variable: 'SCCACHE_REDIS_ENDPOINT'),
          string(credentialsId: 'sccache-redis-password', variable: 'SCCACHE_REDIS_PASSWORD'),
        ]) {
        {% endif %}
          sh '''
          set -e
          if [ -f 'jenkins/install-non-python-deps.sh' ]; then
            prepare-cargo-cache
            export RUSTC_WRAPPER=sccache
            export CARGO_INCREMENTAL=0

            ./jenkins/install-non-python-deps.sh
          fi
          '''
        }
      {% if production_jenkins %}
      }
      {% endif %}
    }

    {%- if do_rust %}
    stage('Preparatory steps') {
      parallel {
        {% filter indent(width=8) %}
          {%- include 'includes/stage-rust-build.groovy.j2' -%}
        {% endfilter %}
      }
    }
    {%- endif %}

    stage('Checks') {
      options {
        timeout(time: {{ timeout }}, unit: 'MINUTES')
      }

      parallel {
        stage ('Code quality') {
          steps {
            sh '''SKIP={{precommit_skip_checks}} pre-commit run --all-files --show-diff-on-failure'''
          }
        }
        stage ('mypy') {
          steps {
            sh '''tox -e mypy'''
          }
        }
        {% filter indent(width=8) %}
          {%- include 'includes/stage-python-tests.groovy.j2' -%}
        {% endfilter %}

        {%- if do_cypress %}
        {% filter indent(width=8) %}
          {%- include 'includes/stage-cypress-tests.groovy.j2' -%}
        {% endfilter %}
        {%- endif %}

        {%- if do_rust %}
        {% filter indent(width=8) %}
          {%- include 'includes/stage-rust-tests.groovy.j2' -%}
        {% endfilter %}
        {%- endif %}

        stage('Sphinx documentation') {
          {% filter indent(width=10) %}
            {%- include 'includes/agent-docker-sphinx.groovy.j2' -%}
          {% endfilter %}

          steps {
            sh '''
            if tox -a | grep -x sphinx >/dev/null
            then
              tox -e sphinx -x testenv:sphinx.basepython={{ sphinx_basepython }}
            else
              echo WARNING: no sphinx environment in tox.ini
            fi
            '''
          }
        } // sphinx doc
      } // parallel
    } // Tests stage
  } // stages

  post {
    {% filter indent(width=4) %}
      {%- include 'includes/update-gitlab-commit-status.groovy.j2' -%}
    {% endfilter %}
    always {
      script {
        if (env.gitlabMergeRequestIid) {
          // when building a merge request, discover base commit in master branch
          // and its associated Jenkins build in order to display code coverage report
          // in Jenkins UI focused on the merge request changes
          discoverGitReferenceBuild(referenceJob: "{{name}}/master")
        }
      }
      // publish code coverage report to browse it from Jenkins UI
      recordCoverage(
        tools: [[parser: 'COBERTURA', pattern: '**/*coverage*.xml']],
        checksAnnotationScope: 'ALL_LINES',
        sourceCodeRetention: 'EVERY_BUILD',
        sourceDirectories: [[path: '{{python_module}}'.replace('.', '/')]],
      )
    }
    cleanup {
      cleanWs()
    }
  } // post
} // pipeline
