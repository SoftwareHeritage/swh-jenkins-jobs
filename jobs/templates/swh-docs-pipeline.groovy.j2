pipeline {
  {% filter indent(width=2) %}
    {%- include 'templates/includes/agent-docker.groovy.j2' -%}
  {% endfilter %}

  stages {
    stage('Checkout swh environment') {
      steps {
        updateGitlabCommitStatus name: 'jenkins', state: 'running'
        checkout([
          $class: 'GitSCM',
          extensions: [[$class: 'CloneOption', depth: 1, shallow: true]],
          gitTool: 'Default',
          userRemoteConfigs: [[
            url: '{{gitlab_url}}/swh/devel/swh-environment.git'
          ]],
        ])
      }
    }

    stage('Checkout swh modules') {
      steps {
        script {
          sh'''#!/bin/bash
          crudini --del .mrconfig snippets
          crudini --del .mrconfig swh-py-template
          # only fetch the HEAD branch instead of all (potentially large) branches
          sed -i '/swh-docs/!s/git clone/git clone --single-branch/g' .mrconfig
          mr -j 4 -t update
          '''
        }
      }
    }

    stage('Build Software Heritage documentation') {
      steps {
        dir('swh-docs') {
          script {
            if ("${env.gitlabMergeRequestIid}" != "null") {
              sh "git fetch origin merge-requests/${env.gitlabMergeRequestIid}/head:merge_request && \
                  git checkout merge_request"
            } else {
              sh "git checkout ${env.gitlabSourceBranch}"
            }
            sh '''#!/bin/bash
            SPHINXOPTS='-W -T --jobs auto --keep-going -w errors.log' SPHINXOPTCOLOR='--no-color' tox --runner virtualenv run -e sphinx-dev -x testenv:sphinx-dev.basepython={{sphinx_basepython}}
            '''
          }
        }
      }
    }
  }

  post {
    failure {
      {% filter indent(width=6) %}
        {%- include 'jobs/templates/includes/update-gitlab-commit-status-failure.groovy.j2' -%}
      {% endfilter %}
    }
    success {
      {% filter indent(width=2) %}
        {%- include 'jobs/templates/includes/update-gitlab-commit-status-success.groovy.j2' -%}
      {% endfilter %}
      script {
        if (env.gitlabSourceBranch == 'master' || env.gitlabSourceBranch == "main") {
          build(
            job: '/DDOC/publish',
            propagate: false,
            wait: false,
          )
        }
      }
    }
    aborted {
      {% filter indent(width=2) %}
        {%- include 'jobs/templates/includes/update-gitlab-commit-status-aborted.groovy.j2' -%}
      {% endfilter %}
    }
    always {
      archiveArtifacts(
        allowEmptyArchive: true,
        artifacts: 'swh-docs/docs/errors.log,swh-docs/.tox/log/*',
        fingerprint: true,
      )

      publishHTML (target: [
        allowMissing: true,
        alwaysLinkToLastBuild: false,
        keepAll: true,
        reportDir: 'swh-docs/docs/_build/html',
        reportFiles: 'index.html',
        reportName: 'SWH Documentation'
      ])
    }
    cleanup {
      cleanWs()
    }
  }
}
