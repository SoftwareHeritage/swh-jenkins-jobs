def repo_name = "{{repo_name}}"

// Normalize to "latest" if we build from head commit (main or master)
// Otherwise, keep the transmitted tag
{%- if gitlab_project %}
// remove refs/tags/ prefix from source branch
def tag = env.gitlabSourceBranch.substring(10)
{%- else %}
def tag = params.TAG
{%- endif %}

def tag_name = ( tag == "origin/main" || tag == "origin/master" ) ? "latest" : tag

// The following is configured in jenkins manually:
// > Manage Jenkins > Configure System > Declarative pipeline (Docker)
// Input the information in the form
// Docker label: docker-io
// Registry credentials: select the token created for the occasion in the docker hub
// user (permissions required: Read / Write / Delete)
// then click the 'Add' button
def dockerCredentialsKeyID = 'docker-io'
def registry_url = "registry-1.docker.io"

def image_label = env.BUILD_TAG

// The following pipeline uses a specific Makefile with the following targets:
// - build: locally build the image out of the repository
// TAG, IMAGE_LABEL (to ease cleanup part) must be provided
// - test: test the locally built image
// TAG must be provided
// - clean: clean up locally built image (parametric on the jenkins build)
// IMAGE_LABEL must be provided
// - push: publish to the registry
// TAG, REGISTRY_URL must be provided

pipeline {
  agent any
  stages {
    stage ('Pre-cleanup') {
      steps {
        cleanWs()
      }
    }
    stage('Checkout Repository') {
      steps {
        {%- if gitlab_project %}
        updateGitlabCommitStatus name: 'jenkins', state: 'running'
        {%- endif %}
        checkout([
          $class: 'GitSCM',
          branches: [[name: tag]],
          userRemoteConfigs: [[
            {%- if not gitlab_project %}
            url: "https://forge.softwareheritage.org/source/${repo_name}/",
            {%- else %}
            url: "{{gitlab_url}}/{{gitlab_project_name}}"
            {%- endif %}
          ]],
        ])
      }
    }
    stage ('Build image') {
      steps {
        sh "make build TAG=${tag} IMAGE_LABEL=${image_label}"
      }
    }
    stage ('Push image') {
      steps {
        script {
          // first make sure the image is ok
          sh "make test TAG=${tag}"
          // then publish it
          docker.withRegistry("https://${registry_url}", dockerCredentialsKeyID) {
            sh "make push TAG=${tag} REGISTRY_URL=${registry_url}"
          }
        }
      }
    }
  }
  post {
    always {
      // and locally built image (resulting from the current jenkins build)
      sh "make clean IMAGE_LABEL=${image_label}"
      // finally clean workspace
      cleanWs()
    }
    {%- if gitlab_project %}
    failure {
      updateGitlabCommitStatus name: 'jenkins', state: 'failed'
    }
    success {
      updateGitlabCommitStatus name: 'jenkins', state: 'success'
    }
    aborted {
      updateGitlabCommitStatus name: 'jenkins', state: 'canceled'
    }
    {%- endif %}
  }
}
