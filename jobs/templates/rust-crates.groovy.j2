// Whether we do the publication step
def publish_ok = not params.dry_run

pipeline {
  {% filter indent(width=2) %}
    {%- include 'includes/agent-docker.groovy.j2' -%}
  {% endfilter %}

  stages {
    stage('Run tests') {
      when {
        expression { return !params.SKIP_TESTS }
        beforeAgent true
      }
      agent none
      steps {
        build(
          job: '/rust/{{name}}/gitlab-builds',
          parameters: [
            string(name: 'REVISION', value: params.GIT_TAG),
          ],
          propagate: !params.IGNORE_TESTS,
        )
      }
    }

    stage('Checkout') {
      steps {
        checkout([
          $class: 'GitSCM',
          userRemoteConfigs: [[
            name:'origin', url: '{{gitlab_url}}/{{gitlab_project_name}}.git',
            refspec: '+refs/tags/*:refs/remotes/origin/tags*'
          ]],
          branches: [[
            name: "${params.GIT_TAG}"
          ]],
          extensions: [
            [$class: 'CloneOption', honorRefspec: true],
            [
              $class: 'SubmoduleOption',
              disableSubmodules: false,
              recursiveSubmodules: true,
            ]
          ],
          extensions: [],
          gitTool: 'Default',
        ])
      }
    }

    stage('(DryRun) Publish locally - Checks cargo package step is ok') {
      steps {
        // Use a local cargo registry to publish crates
        sh """#!/bin/bash
        cargo install cargo-http-registry
        cargo-http-registry /tmp/cargo-registry &
        mkdir -p .cargo
        echo -e '[registries]\nlocal-registry = {index = "file:///tmp/cargo-registry"}\n' \
          > .cargo/config.toml
        """
        // Check whether all crates from the repositories are crate compliant
        {% for crate in crate_names %}
          sh """
          CARGO_REGISTRIES_LOCAL_REGISTRY_TOKEN=foo \
          cargo publish --locked --registry=local-registry -p {{crate}}
          """
        {% endfor %}
      }
    }

    {% if production_jenkins %}
    stage('Publish') {
      when {
        // and we are ok to publish
        expression { publish_ok }
      }
      steps {
        // Then we are go to publish the crates
        withCredentials([
          string(credentialsId: 'swhmirror-crates-api-token',
                 variable: 'CARGO_REGISTRY_TOKEN')]) {
          {% for crate in crate_names %}
            sh '''#!/bin/bash
            crate_version=$(cargo pkgid -p {{crate}} | cut -d@ -f2)
            if cargo search {{crate}} | grep "^{{crate}} = \\\"${crate_version}\\\""
            then
              echo "Crate {{crate}} with version ${crate_version} already published, nothing to do."
            else
              cargo publish --locked -p {{crate}}
              # ensure crate got published before publishing the next ones
              until cargo search {{crate}} | grep "^{{crate}} = \\\"${crate_version}\\\""; do sleep 10; done
            fi
            '''
          {% endfor %}
        }
      }
    }
    {% endif %}
  }
  post {
    cleanup {
      cleanWs()
    }
  }
}
