def startedByTimer = currentBuild.getBuildCauses('hudson.triggers.TimerTrigger$TimerTriggerCause')
def startedByUser = currentBuild.getBuildCauses('hudson.model.Cause$UserIdCause')
def dockerBuildOpts = '--pull'
if (startedByTimer || startedByUser) {
  dockerBuildOpts += ' --no-cache'
}

def branch = "master"
if (env.gitlabMergeRequestIid) {
  branch = "merge-requests/${env.gitlabMergeRequestIid}"
} else if (env.gitlabSourceBranch) {
  branch = env.gitlabSourceBranch
}

pipeline {
  agent {
    label "built-in"
  }

  options {
    timeout(time: 30, unit: 'MINUTES')
    timestamps()
  }

  stages {
    stage('Checkout') {
      steps {
        updateGitlabCommitStatus name: 'jenkins', state: 'running'
        checkout([
          $class: 'GitSCM',
          userRemoteConfigs: [[
            url: '{{gitlab_url}}/{{gitlab_project_name}}.git',
            refspec: '+refs/heads/*:refs/remotes/origin/* \
                      +refs/merge-requests/*/head:refs/remotes/origin/merge-requests/*',
          ]],
          branches: [[
            name: branch
          ]],
          browser: [
            $class: 'GitLab',
            repoUrl: '{{gitlab_url}}/{{gitlab_project_name}}'
          ],
          extensions: [[$class: 'CloneOption', honorRefspec: true],
                       [$class: 'ChangelogToBranch',
                        options: [compareRemote: 'origin', compareTarget: 'master']],
          gitTool: 'Default',
        ])
      }
    }

    stage('Build Docker images') {
      when {
        anyOf {
          expression {
            return startedByTimer
          }
          expression {
            return startedByUser
          }
          // content of docker directory modified
          changeset "docker/**"
        }
      }
      steps {
        dir('docker') {
          sh "docker build $dockerBuildOpts -t swh/stack ."
        }
      }
    }

    stage('Run tests') {
      when {
        anyOf {
          expression {
            return startedByTimer
          }
          expression {
            return startedByUser
          }
          // content of docker directory modified
          changeset "docker/**"
        }
      }
      steps {
        lock('docker-agent-host-port-5080') {
          dir('docker') {
            sh 'tox -- -v'
          }
        }
      }
    }
  }

  post {
    {% filter indent(width=4) %}
      {%- include 'jobs/templates/includes/update-gitlab-commit-status.groovy.j2' -%}
    {% endfilter %}
    always {
      archiveArtifacts(
        allowEmptyArchive: true,
        artifacts: 'docker/**/*.logs',
      )
    }
  }
}
