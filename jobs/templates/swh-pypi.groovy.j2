def module_name = '{{repo_name}}'.replace('-', '.')

def PYPI_UPLOAD_HOST

switch (params.PYPI_HOST) {
  case 'pypi.org':
    PYPI_UPLOAD_HOST = 'upload.pypi.org'
    break
  default:
    PYPI_UPLOAD_HOST = params.PYPI_HOST
    break
}

pipeline {
  {% filter indent(width=2) %}
    {%- include 'includes/agent-docker.groovy.j2' -%}
  {% endfilter %}

  stages {
    stage('Run tests') {
      when {
        expression { return !params.SKIP_TESTS }
        beforeAgent true
      }
      agent none
      steps {
        build(
          job: '/{{name}}/gitlab-builds',
          parameters: [
            string(name: 'REVISION', value: params.GIT_TAG),
          ],
          propagate: !params.IGNORE_TESTS,
        )
      }
    }

    stage('Checkout') {
      steps {
        checkout([
          $class: 'GitSCM',
          userRemoteConfigs: [[
            name:'origin', url: '{{gitlab_url}}/{{gitlab_project_name}}.git',
            refspec: '+refs/tags/*:refs/remotes/origin/tags*'
          ]],
          branches: [[
            name: "${params.GIT_TAG}"
          ]],
          extensions: [[$class: 'CloneOption', honorRefspec: true]],
          doGenerateSubmoduleConfigurations: false,
          extensions: [],
          gitTool: 'Default',
          submoduleCfg: [],
        ])
        sh '''rm -rf dist/'''
      }
    }

    stage('Build assets') {
      steps {
        withCredentials([
          string(credentialsId: 'sentry-auth-token',
                 variable: 'SENTRY_AUTH_TOKEN')]) {
          sh """
            # Build javascript assets
            if [ -f yarn.lock ]; then
              yarn install --frozen-lockfile
              yarn build
            fi"""
        }
      }
    }

    stage('Build sdist') {
      steps {
        sh '$SWH_PYTHON_FOR_GLOBAL_TOOLS -m build --sdist'
      }
    }

    {% filter indent(width=4) %}
      {%- include 'includes/stage-build-wheel.groovy.j2' -%}
    {% endfilter %}

    stage('Archive artifacts') {
      steps {
        archiveArtifacts allowEmptyArchive: true,
          artifacts: 'dist/*',
          fingerprint: true
      }
    }

    stage('Publish') {
      when {
        anyOf {
          expression { return params.FORCE_UPLOAD }
          expression {
            LASTV=sh(returnStdout: true,
                     script:"curl -s https://${params.PYPI_HOST}/pypi/${module_name}/json | jq -r .info.version || true").trim()
            return 'v'+LASTV != params.GIT_TAG
            }
        }
      }
      steps {
        withCredentials([
          usernamePassword(credentialsId: PYPI_UPLOAD_HOST,
                           usernameVariable: 'TWINE_USERNAME',
                           passwordVariable: 'TWINE_PASSWORD')]) {
          sh "twine upload --verbose --repository-url https://${PYPI_UPLOAD_HOST}/legacy/ dist/*"
        }
      }
    }
  }
  post {
    cleanup {
      cleanWs()
    }
  }
}
