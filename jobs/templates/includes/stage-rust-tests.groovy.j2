stage('cargo test') {
  steps {
    script {
      parallel([
        {% for rust_version in [rust_min_version, 'stable', 'nightly'] %}
          'rust {{ rust_version }}': {
            {% if production_jenkins %}
            withCredentials([
              string(credentialsId: 'sccache-redis-endpoint', variable: 'SCCACHE_REDIS_ENDPOINT'),
              string(credentialsId: 'sccache-redis-password', variable: 'SCCACHE_REDIS_PASSWORD'),
            ]) {
            {% endif %}
            {% if rust_version == 'stable'%}
              // one build must keep the default target directory as Python tests might
              // depend on binaries under that path
              def target_dir="target"
            {% else %}
              def target_dir="target_{{ rust_version }}"
            {% endif %}
              sh """\
                set -e
                mkdir -p ${target_dir}
                export RUSTC_WRAPPER=sccache
                export CARGO_INCREMENTAL=0
                cargo +{{ rust_version }} test --target-dir ${target_dir} --all-features --locked
                """
            {% if production_jenkins %}
            }
            {% endif %}
          },
        {% endfor %}
      ])
    }
  }
}

stage('cargo doc {{ rust_min_version }}') {
  steps {
    {% if production_jenkins %}
    withCredentials([
      string(credentialsId: 'sccache-redis-endpoint', variable: 'SCCACHE_REDIS_ENDPOINT'),
      string(credentialsId: 'sccache-redis-password', variable: 'SCCACHE_REDIS_PASSWORD'),
    ]) {
    {% endif %}
      sh """\
        set -e
        mkdir -p target_{{ rust_min_version }}
        export RUSTC_WRAPPER=sccache
        export CARGO_INCREMENTAL=0
        export RUSTDOCFLAGS=\"--deny warnings\"
        cargo +{{ rust_min_version }} doc --target-dir target_{{ rust_min_version }} --all-features --locked --no-deps
        """
    }
  {% if production_jenkins %}
  }
  {% endif %}
}
