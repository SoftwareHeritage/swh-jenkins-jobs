def branch = "master"
if (env.gitlabMergeRequestIid) {
  branch = "merge-requests/${env.gitlabMergeRequestIid}"
} else if (env.gitlabSourceBranch) {
  branch = env.gitlabSourceBranch
}

pipeline {
  {% filter indent(width=2) %}
    {%- include 'templates/includes/agent-docker.groovy.j2' -%}
  {% endfilter %}

  options {
    {% filter indent(width=4) %}
      {%- include 'templates/includes/throttle-job-property.groovy.j2' -%}
    {% endfilter %}
  }

  stages {
    stage('Checkout') {
      steps {
        updateGitlabCommitStatus name: 'jenkins', state: 'running'
        checkout([
          $class: 'GitSCM',
          userRemoteConfigs: [[
            url: '{{gitlab_url}}/{{gitlab_project_name}}.git',
            refspec: '+refs/heads/*:refs/remotes/origin/* \
                      +refs/merge-requests/*/head:refs/remotes/origin/merge-requests/* \
                      +refs/tags/*:refs/remotes/origin/tags*',
          ]],
          branches: [[
            name: branch
          ]],
          browser: [
            $class: 'GitLab',
            repoUrl: '{{gitlab_url}}/{{gitlab_project_name}}'
          ],
          extensions: [[$class: 'CloneOption', honorRefspec: true]],
          gitTool: 'Default',
        ])
      }
    }

    stage('Build Docker test images') {
      steps {
        dir('images') {
          sh ' ./build_images.sh --write-env-file=image-tag.env'
          stash name: 'image-tag-env', includes: 'image-tag.env'
        }
      }
    }

    stage('Run tests') {
      environment {
        SWH_MIRROR_TEST_BASE_URL = "http://172.17.0.1:5081"
        SWH_MIRROR_TEST_KAFKA_BROKER = "broker2.journal.staging.swh.network:9093"
        SWH_MIRROR_TEST_OBJSTORAGE_HOST = "objstorage.softwareheritage.org"
      }

      steps {
        unstash 'image-tag-env'
        lock('docker-agent-host-port-5081') {
          withCredentials([
            usernamePassword(credentialsId: 'swh-mirror-test-kafka',
                             usernameVariable: 'SWH_MIRROR_TEST_KAFKA_USERNAME',
                             passwordVariable: 'SWH_MIRROR_TEST_KAFKA_PASSWORD'),
            usernameColonPassword(credentialsId: 'swh-mirror-test-objstorage',
                                  variable: 'SWH_MIRROR_TEST_OBJSTORAGE_CREDENTIALS')]) {
            sh '''
            SWH_MIRROR_TEST_OBJSTORAGE_URL="https://$SWH_MIRROR_TEST_OBJSTORAGE_CREDENTIALS@$SWH_MIRROR_TEST_OBJSTORAGE_HOST/" \
            tox -e "$TOX_ENVIRONMENT" -- -v --envfile=image-tag.env --timeout=3600
            '''
          }
        }
      }
    }
  }

  post {
    always {
      echo "Clean up Docker stuff"
      sh '''
      docker stack rm swhtest_mirror0 || true
      # Wait for any remaining containers
      docker container ls --filter=label=com.docker.stack.namespace=swhtest_mirror0 --quiet | xargs --no-run-if-empty docker container wait || true
      # Cleanup cruft
      docker config ls --filter=label=com.docker.stack.namespace=swhtest_mirror0 --quiet | xargs --no-run-if-empty docker config rm || true
      docker volume ls --filter=label=com.docker.stack.namespace=swhtest_mirror0 --quiet | xargs --no-run-if-empty docker volume rm || true
      '''
    }
    {% filter indent(width=4) %}
      {%- include 'jobs/templates/includes/update-gitlab-commit-status.groovy.j2' -%}
    {% endfilter %}
  }
}
