def crate_name = '{{crate_name}}'

pipeline {
  {% filter indent(width=2) %}
    {%- include 'includes/agent-docker.groovy.j2' -%}
  {% endfilter %}

  stages {
    stage('Run tests') {
      when {
        expression { return !params.SKIP_TESTS }
        beforeAgent true
      }
      agent none
      steps {
        build(
          job: '/{{name}}/gitlab-builds',
          parameters: [
            string(name: 'REVISION', value: params.GIT_TAG),
          ],
          propagate: !params.IGNORE_TESTS,
        )
      }
    }

    stage('Checkout') {
      steps {
        checkout([
          $class: 'GitSCM',
          userRemoteConfigs: [[
            name:'origin', url: '{{gitlab_url}}/{{gitlab_project_name}}.git',
            refspec: '+refs/tags/*:refs/remotes/origin/tags*'
          ]],
          branches: [[
            name: "${params.GIT_TAG}"
          ]],
          extensions: [[$class: 'CloneOption', honorRefspec: true]],
          doGenerateSubmoduleConfigurations: false,
          extensions: [],
          gitTool: 'Default',
          submoduleCfg: [],
        ])
      }
    }

    stage('Publish') {
      when {
        anyOf {
          expression { return params.FORCE_UPLOAD }
          expression {
            LASTV=sh(returnStdout: true,
                     script:"cargo publish -p ${crate_name} --dry-run | awk '/Uploading/{print $3}'").trim()
            return LASTV != params.GIT_TAG
            }
        }
      }
      steps {
        withCredentials([
          usernamePassword(credentialsId: PYPI_UPLOAD_HOST,
                           usernameVariable: 'TWINE_USERNAME',
                           passwordVariable: 'TWINE_PASSWORD')]) {
          sh "cargo publish -p ${crate_name}"
        }
      }
    }
  }
  post {
    cleanup {
      cleanWs()
    }
  }
}
