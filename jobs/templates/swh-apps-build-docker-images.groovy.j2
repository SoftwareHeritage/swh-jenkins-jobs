def target_branch = params.TARGET_BRANCH
def module = params.MODULE
def module_version = params.VERSION
def dry_run = params.DRY_RUN
def cleanup_image = params.CLEANUP_IMAGE
def trigger_in_parallel = params.PARALLEL
// For local build, use 'docker' label, else 'built-in' (the default, e.g. for prod)
{% if production_jenkins %}
def label_node = 'built-in'
{% else %}
def label_node = 'docker'
{% endif %}

def repository_prefix_url

// List of impacted images
def impacted_images
// Map of job (build-docker-image) to recreate
def images = [:]

// Targetting branch with a static name so future build can continue to push new version
// on it if already opened.
def source_branch = "swh-next-version"

pipeline {
  agent { label label_node }

  options {
    {% filter indent(width=4) %}
      {%- include 'templates/includes/throttle-job-property.groovy.j2' -%}
    {% endfilter %}
  }

  stages {
    stage('Checkout swh-apps repository') {
      steps {
        script {
          repository_prefix_url = dry_run ? "{{gitlab_url}}/" : "{{gitlab_ssh_url}}:"
        }
        dir ("$WORKSPACE/swh-apps") {
          checkout([
            $class: 'GitSCM',
            userRemoteConfigs: [[
              credentialsId: 'gitlab-public-ci-ssh',
              name: 'origin',
              url: "${repository_prefix_url}{{gitlab_project_name}}.git",
            ]],
            extensions: [[$class: 'CloneOption', depth: 1, shallow: false],
                         [$class: 'LocalBranch', localBranch: "**"]],
            doGenerateSubmoduleConfigurations: false,
            gitTool: 'Default',
            submoduleCfg: [],
            branches: [[
              name: "master"
            ]],
          ])
          // FIXME: Determine the proper way to declare this directly with gitscm above
          sh "git branch --set-upstream-to=origin/master"
        }
      }
    }

    // FIXME: Build and push directly this image in the registry (built daily) and us it
    // directly here
    stage('Build/Reuse "app-manager" image') {
      steps {
        sh """#!/bin/bash
        set -x
        docker build --pull --build-arg userid=`id -u` \
                            --build-arg groupid=`id -g` \
                            -t app-manager $WORKSPACE/swh-apps/scripts/
        """
      }
    }

    stage('Search impacted application images to rebuild') {
      steps {
        sh """#!/bin/bash
        set -x
        docker run --rm -v $WORKSPACE/swh-apps:/src app-manager list-dependent-apps \
          --application ${module} \
          --version ${module_version} &> $WORKSPACE_TMP/impacted-images
        """
      }
    }

    stage('Trigger docker image rebuilds') {
      steps {
        script {
          impacted_images = readFile("$WORKSPACE_TMP/impacted-images").readLines()
          impacted_images.each { image, closure ->
            images["build-image-${image}"] = {
              build job: 'build-docker-image',
              parameters: [
                // run(name: "build-docker-image-${image}"),
                string(name: 'APPLICATION', value: image),
                booleanParam(name: 'DRY_RUN', value: dry_run),
                booleanParam(name: 'CLEANUP_IMAGE', value: cleanup_image),
              ],
              // period before building
              quietPeriod: 1,
              // result of this step will be the result of the downstream job
              propagate: true,
              // make pipeline wait for result of the job
              wait: true
            }
          }

          if (trigger_in_parallel) {
            // execute jobs in parallel
            parallel(images)
          } else {
            // execute jobs in sequentially
            images.each { name, closure ->
              echo "Execute build-docker-image for ${name}"
              closure.call()
            }
          }
        }
      }
    }

    stage('Refresh swh-apps repository with latest build commits') {
      steps {
        sshagent (credentials: ['gitlab-public-ci-ssh']) {
          dir ("$WORKSPACE/swh-apps") {
            sh """#!/bin/bash
            set -x

            git pull --rebase
            git log --oneline | head -${impacted_images.size() + 1} \
              > $WORKSPACE_TMP/git-log-summary
            """
          }
        }
      }
    }

    stage('Checkout swh-charts repository') {
      steps {
        dir ("$WORKSPACE/swh-charts") {
          checkout([
            $class: 'GitSCM',
            userRemoteConfigs: [[
              credentialsId: 'gitlab-public-ci-ssh',
              name: 'origin',
              url: "${repository_prefix_url}swh/infra/ci-cd/swh-charts.git",
              refspec: '+refs/heads/*:refs/remotes/origin/*',
            ]],
            branches: [[
              name: target_branch,
            ]],
            extensions: [[$class: 'CloneOption', honorRefspec: true]],
            doGenerateSubmoduleConfigurations: false,
            gitTool: 'Default',
            submoduleCfg: [],
            branches: [[
              name: target_branch
            ]],
          ])
          sh """#!/bin/bash
          set -x
          git checkout ${target_branch}
          git branch --set-upstream-to=origin/${target_branch}
          # either branch already exists and we start from it or we create a new one
          # starting from ${target_branch}
          git checkout ${source_branch} || git checkout -b ${source_branch}
          """
        }
      }
    }

    // - step to trigger the update of the values.yaml to adapt
    stage('Update swh-charts with new images version') {
      steps {
        dir ("$WORKSPACE") {
          // First, let's create commits with changes
          sh """#!/bin/bash
          set -x
          # Trigger swh-charts:/values-swh-application-versions.yaml version updates
          docker run --rm \
            --volume $WORKSPACE/swh-apps:/src \
            --volume $WORKSPACE/swh-charts:/tmp/swh-charts \
              app-manager update-versions \
                --applications-filepath /tmp/swh-charts/values-swh-application-versions.yaml \
                --chart-filepath /tmp/swh-charts/swh/Chart.yaml
          set +x
          # Commit the changes
          cd swh-charts
          git add .
          git commit -m "v`grep appVersion $WORKSPACE/swh-charts/swh/Chart.yaml | awk '{print \$2}'`: Release ${module} ${module_version}"
          git log --oneline | head -2

          # Not working with multi-line output.
          # failure: "fatal: push options must not have new line characters"
          # -o merge_request.description="`cat $WORKSPACE_TMP/git-log-summary`"
          """
        }

        script {
          if (! dry_run) {
            // When in writing mode, open the MR in gitlab
            sshagent (credentials: ['gitlab-public-ci-ssh']) {
              dir("$WORKSPACE/swh-charts") {
                sh """

                # Try to open a MR. If an MR already exists, just rebase the
                # current commits on top of it and push the new commits to the
                # source_branch

                git push \
                  -o merge_request.create \
                  -o merge_request.target=${target_branch} \
                  -o merge_request.title="v`grep appVersion $WORKSPACE/swh-charts/swh/Chart.yaml | awk '{print \$2}'`: Release ${module} ${module_version}" \
                  -o merge_request.remove_source_branch=true \
                   origin ${source_branch} || \
                ( git fetch && git rebase origin/${source_branch} && git push origin ${source_branch} )
                """
              }
            }
          } else {
            echo "DRY-RUN: stop"
          }
        }
      }
    }
  }

  post {
    cleanup {
      cleanWs()
    }
  }
}
