def application = params.APPLICATION
def dry_run = params.DRY_RUN
def cleanup_image = params.CLEANUP_IMAGE
// For local build, use 'docker' label, else 'built-in' (the default, e.g. for prod)
{% if production_jenkins %}
def label_node = 'built-in'
{% else %}
def label_node = 'docker'
{% endif %}

def requirement_filepath = "apps/${application}/requirements.txt"
def frozen_set_filepath = "apps/${application}/requirements-frozen.txt"
def dockerfile_filepath = "apps/${application}/Dockerfile"

// The following is configured in jenkins manually:
// > Manage Jenkins > Configure System > Declarative pipeline (Docker)
// Input the information in the form
// container-registry: container-registry.softwareheritage.org
// Registry credentials: select the pat token created for the occasion for the gitlab's
// (username/password credentials created for the occasion, username: jenkins, password
// the pat token)
// Docker label: gitlab-registry
// jenkins user in gitlab.s.o (permissions: Read+Write access to registry)
// then click the 'Add' button

def registry_domain = "container-registry.softwareheritage.org/swh/infra/swh-apps"
def dockerCredentialsKeyID = 'gitlab-registry'

// swh-loader-git: loader_git
// swh-storage-replayer: storage_replayer
// ...
def image_name = application.replaceAll('-', '_').replaceAll('swh_', '')
echo "image name to build: ${image_name}"

// Determine the following during the job execution
def application_tag
def image_version
def full_image_version

def git_log = 'git log | head -10'
def repository_prefix_url

pipeline {
  // Where to make the job run
  agent { label label_node }

  options {
    {% filter indent(width=4) %}
      {%- include 'templates/includes/throttle-job-property.groovy.j2' -%}
    {% endfilter %}
  }

  stages {
    stage('Checkout swh-apps repository') {
      steps {
        script {
          repository_prefix_url = dry_run ? "{{gitlab_url}}/" : "{{gitlab_ssh_url}}:"
        }
        checkout([
          $class: 'GitSCM',
          userRemoteConfigs: [[
            credentialsId: 'gitlab-public-ci-ssh',
            name: 'origin',
            url: "${repository_prefix_url}{{gitlab_project_name}}.git",
          ]],
          extensions: [[$class: 'CloneOption', depth: 1, shallow: false],
                       [$class: 'LocalBranch', localBranch: "**"]],
          gitTool: 'Default',
          branches: [[
            name: "master"
          ]],
        ])
        // FIXME: Determine the proper way to declare this directly with gitscm above
        sh "git branch --set-upstream-to=origin/master"
      }
    }

    // FIXME: Build and push directly this image in the registry (built daily) and use
    // it directly here
    stage('Build/Reuse "app-manager" image') {
      steps {
        sh 'docker build --pull --build-arg userid=`id -u` --build-arg groupid=`id -g` -t app-manager scripts/'
      }
    }

    stage('Build frozen requirements sets') {
      steps {
        script {
          requirement_exists = fileExists(requirement_filepath)
          if ( requirement_exists ) {
            sh """
              echo "Before build frozen requirements set"
              git status
              git diff
            """
            sh "docker run --rm -v `pwd`:/src app-manager generate-frozen-requirements ${application}"

            sh """
              echo "Before stash instruction"
              git status
              git diff
            """
            stash name: "${application}-requirements-frozen", includes: frozen_set_filepath
            sh """
              echo "After stash instruction"
              git status
              git diff
            """
          }
        }
      }
    }

    stage('Commit and declare swh-apps tag') {
      steps {
        script {
          sh """
            ${git_log}
            echo `pwd`
          """
          application_tag = sh (
            // Retrieve the next version from the latest tag on that application starts
            // at $(today).1, then increments to $(today).2, .3, ... if any other builds
            // happen the same day.
            script: "docker run --rm -v `pwd`:/src app-manager tag next '${application}'",
            returnStdout: true
          ).trim()
          if ( ! dry_run ) {
            sshagent (credentials: ['gitlab-public-ci-ssh']) {
              sh """
                git pull
                # Pushes an empty tag in the repository. If any concurrent build happens
                # around the same time, they will then take the next version. Thus
                # avoiding any writing concurrent issue down the (pipe)line.
                git tag -a ${application_tag} -m "Empty tag to be overwritten"
                git push origin ${application_tag}
              """
            }
          }
          echo """
            application tag: ${application_tag}
            next tag for ${application}: ${application_tag}
            image name: ${image_name}
          """
          image_version = application_tag.replaceAll("${application}-", "")
          echo """
            image version: ${image_version}
            frozen set filepath: ${frozen_set_filepath}
          """
          sh """
            git status
            git diff
            git checkout master
          """
          dockerfile_exists = fileExists(dockerfile_filepath)
          if ( requirement_exists && dockerfile_exists ) {
            // when requirements.txt exists, the frozen set exists and is stashed
            // so unstash it first
            unstash "${application}-requirements-frozen"
            commit_msg = "'${application}-${image_version}: Build image'"
            sh """
              git add ${frozen_set_filepath}
              # Skipping empty commit to ease reproducibility even without changes
              git commit --no-verify -m ${commit_msg} || echo "Skip empty commit"
              ${git_log}
            """
          }
        }
      }
    }

    stage('Docker image build') {
      steps {
        script {
          if ( dockerfile_exists ) {
            // Determine docker image name and version
            full_image_version = "${registry_domain}/${image_name}:${image_version}"
            latest_image_version = "${registry_domain}/${image_name}:latest"
            echo "full image version: ${full_image_version}"
            sh """
              # Build image with the versioned tag
              docker build --pull --tag ${full_image_version} apps/${application}
              # Build image with latest tag
              docker tag ${full_image_version} ${latest_image_version}
            """
          }
        }
      }
    }

    stage('Git tag & push') {
      steps {
        script {
          if ( ! dry_run ) {
            sshagent (credentials: ['gitlab-public-ci-ssh']) {
              sh "./scripts/git_tag_and_push.sh ${application_tag}"
            }
          } else {
            echo "Skipping `git push`."
          }
        }
      }
    }

    // TODO: Determine how to and trigger tests on built image
    // stage('Test docker image') {}

    stage('Push image in registry') {
      steps {
        script {
          if ( ! dry_run && dockerfile_exists ) {
            docker.withRegistry("https://${registry_domain}", dockerCredentialsKeyID) {
              sh """
                docker push ${full_image_version}
                docker push ${latest_image_version}
              """
            }
          } else {
            echo "Skipping `docker image push`."
          }
        }
      }
    }
  }

  post {
    cleanup {
      cleanWs()
    }
    always {
      script {
        if ( dockerfile_exists && cleanup_image ) {
          sh """
            docker image rm ${full_image_version}
            docker image rm ${latest_image_version}
          """
        }
      }
    }
  }
}
