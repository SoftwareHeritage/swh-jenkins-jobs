def branch = "main"
if (env.gitlabMergeRequestIid) {
  branch = "merge-requests/${env.gitlabMergeRequestIid}"
} else if (env.gitlabSourceBranch) {
  branch = env.gitlabSourceBranch
}

def startedByUser = currentBuild.getBuildCauses('hudson.model.Cause$UserIdCause')
def startedByPushToMain = env.gitlabActionType == "PUSH" && env.gitlabBranch == "main"

def can_push_image = false
if ((startedByUser || startedByPushToMain) && !env.gitlabMergeRequestIid) {
  can_push_image = true
}

// Normalize to "latest" if we build from head commit (main or master)
def tag = "latest"
// Otherwise, keep the transmitted tag but remove refs/tags/ prefix from source branch
if (env.gitlabSourceBranch.startsWith("refs/tags/")) {
  tag = env.gitlabSourceBranch.substring(10)
  can_push_image = true
}
// Use dev-latest tag when building a merge request
if (env.gitlabMergeRequestIid) {
  tag = "dev-latest"
}

// The following is configured in jenkins manually:
// > Manage Jenkins > Configure System > Declarative pipeline (Docker)
// Input the information in the form
// Docker label: docker-io
// Registry credentials: select the token created for the occasion in the docker hub
// user (permissions required: Read / Write / Delete)
// then click the 'Add' button
def dockerCredentialsKeyID = 'docker-io'
def registry_url = "registry-1.docker.io"

def image_label = env.BUILD_TAG

// The following pipeline uses a specific Makefile with the following targets:
// - build: locally build the image out of the repository
// TAG, IMAGE_LABEL (to ease cleanup part) must be provided
// - test: test the locally built image
// TAG must be provided
// - clean: clean up locally built image (parametric on the jenkins build)
// IMAGE_LABEL must be provided
// - push: publish to the registry
// TAG, REGISTRY_URL must be provided

pipeline {
  agent any
  stages {
    stage ('Pre-cleanup') {
      steps {
        cleanWs()
      }
    }
    stage('Checkout Repository') {
      steps {
        updateGitlabCommitStatus name: 'jenkins', state: 'running'
        checkout([
          $class: 'GitSCM',
          branches: [[name: branch]],
          userRemoteConfigs: [[
            url: "{{gitlab_url}}/{{gitlab_project_name}}",
            refspec: '+refs/heads/*:refs/remotes/origin/* \
                      +refs/merge-requests/*/head:refs/remotes/origin/merge-requests/* \
                      +refs/tags/*:refs/remotes/origin/tags*',
          ]],
          extensions: [[$class: 'CloneOption', honorRefspec: true]],
        ])
      }
    }
    stage ('Build image') {
      steps {
        sh "make build TAG=${tag} IMAGE_LABEL=${image_label}"
      }
    }
    stage ('Test image') {
      steps {
        sh "make test TAG=${tag}"
      }
    }
    stage ('Push image') {
      when {
        expression { can_push_image }
      }
      steps {
        script {
          // then publish it
          docker.withRegistry("https://${registry_url}", dockerCredentialsKeyID) {
            sh "make push TAG=${tag} REGISTRY_URL=${registry_url}"
          }
        }
      }
    }
  }
  post {
    always {
      // and locally built image (resulting from the current jenkins build)
      sh "make clean IMAGE_LABEL=${image_label}"
      // finally clean workspace
      cleanWs()
    }
    {% filter indent(width=4) %}
      {%- include 'jobs/templates/includes/update-gitlab-commit-status.groovy.j2' -%}
    {% endfilter %}
  }
}
